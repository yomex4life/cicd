import { Stack, StackProps, RemovalPolicy, Duration } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { CreateSthree } from './create-sthree';
import { Function, FunctionUrlAuthType, Runtime, Code, HttpMethod } from 'aws-cdk-lib/aws-lambda';
import { RetentionDays } from 'aws-cdk-lib/aws-logs';
// import * as sqs from 'aws-cdk-lib/aws-sqs';

export class CicdStack extends Stack {
  public readonly serviceCode: Code;
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    this.serviceCode = Code.fromCfnParameters();
    const s3bucket = new CreateSthree(this, 'MySthree');

    //resource generated by the construct
    const helloFunction = new Function(this,'HelloHandler', {
    runtime: Runtime.NODEJS_16_X,
    code: Code.fromAsset('src'), //Folder name
    handler: 'index.handler',
    functionName: 'simple-lambda-function',
    memorySize: 128,
    logRetention: RetentionDays.THREE_DAYS,
    currentVersionOptions: {
      removalPolicy: RemovalPolicy.DESTROY
    }
  });

  const fnurl = helloFunction.addFunctionUrl({
    authType: FunctionUrlAuthType.NONE,
    cors: {
      allowedMethods: [HttpMethod.GET],
      allowedOrigins: ["*"],
      maxAge: Duration.minutes(1)
    }
  });
  }
}
